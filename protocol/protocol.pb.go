// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol.proto

package protocol

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PackType int32

const (
	UNIVERSAL         PackType = 0
	PackTypeHello     PackType = 1
	PackTypeHelloR    PackType = 2
	PackTypeStreamNew PackType = 16
	// 流数据包
	// 内部还可能会包含接收缓冲区剩余空间
	PackTypeStreamData  PackType = 17
	PackTypeStreamDown  PackType = 18
	PackTypeStreamClose PackType = 19
	PackTypeStreamRst   PackType = 20
	// 修改缓冲区大小
	// 包内同时包含接收、发送双方的缓冲区字段
	// 虽然流的双方都可以发送这个包
	// 但是只有接收方发送的有效，另一方发送的只是建议
	// 扩大缓冲区可以立刻生效
	// 但是如果是缩小接收缓冲区，必须等到收到 SetR 后才能实际缩小接收缓冲区
	PackTypeStreamWindowsSet  PackType = 22
	PackTypeStreamWindowsSetR PackType = 23
)

var PackType_name = map[int32]string{
	0:  "UNIVERSAL",
	1:  "PackTypeHello",
	2:  "PackTypeHelloR",
	16: "PackTypeStreamNew",
	17: "PackTypeStreamData",
	18: "PackTypeStreamDown",
	19: "PackTypeStreamClose",
	20: "PackTypeStreamRst",
	22: "PackTypeStreamWindowsSet",
	23: "PackTypeStreamWindowsSetR",
}

var PackType_value = map[string]int32{
	"UNIVERSAL":                 0,
	"PackTypeHello":             1,
	"PackTypeHelloR":            2,
	"PackTypeStreamNew":         16,
	"PackTypeStreamData":        17,
	"PackTypeStreamDown":        18,
	"PackTypeStreamClose":       19,
	"PackTypeStreamRst":         20,
	"PackTypeStreamWindowsSet":  22,
	"PackTypeStreamWindowsSetR": 23,
}

func (PackType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{0}
}

// status 还是分开吧，如果统一空间浪费比较严重。
type HelloRStatus int32

const (
	HelloRStatusOk                            HelloRStatus = 0
	HelloRStatusTimeout                       HelloRStatus = 1
	HelloRStatusConnectionNotAllowedByRuleset HelloRStatus = 256
)

var HelloRStatus_name = map[int32]string{
	0:   "HelloRStatusOk",
	1:   "HelloRStatusTimeout",
	256: "HelloRStatusConnectionNotAllowedByRuleset",
}

var HelloRStatus_value = map[string]int32{
	"HelloRStatusOk":                            0,
	"HelloRStatusTimeout":                       1,
	"HelloRStatusConnectionNotAllowedByRuleset": 256,
}

func (HelloRStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{1}
}

// 客户端发送第一次握手
// 让客户端优先发送第一个包的目的是为了方便后期扩展
type Hello struct {
	// 协议版本
	ProtocolVersion uint64 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	// 库的内部版本
	LibraryVersion uint64 `protobuf:"varint,2,opt,name=library_version,json=libraryVersion,proto3" json:"library_version,omitempty"`
	// 支持的特征列表
	// 一般约定是，排前面的优先支持，即当多个特征互相冲突时，协商时优先使用排行靠前的特征。
	// 每个 bytes，最前面为 uvarint 值，表示特征id，后面为具体详细数据
	Feature [][]byte `protobuf:"bytes,3,rep,name=feature,proto3" json:"feature,omitempty"`
}

func (m *Hello) Reset()      { *m = Hello{} }
func (*Hello) ProtoMessage() {}
func (*Hello) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{0}
}
func (m *Hello) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hello) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hello.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hello) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hello.Merge(m, src)
}
func (m *Hello) XXX_Size() int {
	return m.Size()
}
func (m *Hello) XXX_DiscardUnknown() {
	xxx_messageInfo_Hello.DiscardUnknown(m)
}

var xxx_messageInfo_Hello proto.InternalMessageInfo

func (m *Hello) GetProtocolVersion() uint64 {
	if m != nil {
		return m.ProtocolVersion
	}
	return 0
}

func (m *Hello) GetLibraryVersion() uint64 {
	if m != nil {
		return m.LibraryVersion
	}
	return 0
}

func (m *Hello) GetFeature() [][]byte {
	if m != nil {
		return m.Feature
	}
	return nil
}

type HelloR struct {
	// 协议版本
	ProtocolVersion uint64 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	// 库的内部版本
	LibraryVersion uint64 `protobuf:"varint,2,opt,name=library_version,json=libraryVersion,proto3" json:"library_version,omitempty"`
	// 状态
	Status uint64 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	// 延迟，当失败等错误时，客户端需要在 delay 秒后才能重试
	Delay uint64 `protobuf:"varint,4,opt,name=delay,proto3" json:"delay,omitempty"`
	//错误消息
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// 服务端返回最终支持的特征列表
	Feature [][]byte `protobuf:"bytes,6,rep,name=feature,proto3" json:"feature,omitempty"`
}

func (m *HelloR) Reset()      { *m = HelloR{} }
func (*HelloR) ProtoMessage() {}
func (*HelloR) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{1}
}
func (m *HelloR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloR.Merge(m, src)
}
func (m *HelloR) XXX_Size() int {
	return m.Size()
}
func (m *HelloR) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloR.DiscardUnknown(m)
}

var xxx_messageInfo_HelloR proto.InternalMessageInfo

func (m *HelloR) GetProtocolVersion() uint64 {
	if m != nil {
		return m.ProtocolVersion
	}
	return 0
}

func (m *HelloR) GetLibraryVersion() uint64 {
	if m != nil {
		return m.LibraryVersion
	}
	return 0
}

func (m *HelloR) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *HelloR) GetDelay() uint64 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *HelloR) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HelloR) GetFeature() [][]byte {
	if m != nil {
		return m.Feature
	}
	return nil
}

type StreamNew struct {
	// 客户端为单数、服务端为双数
	// 0 保留
	Id uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *StreamNew) Reset()      { *m = StreamNew{} }
func (*StreamNew) ProtoMessage() {}
func (*StreamNew) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{2}
}
func (m *StreamNew) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamNew) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamNew.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamNew) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamNew.Merge(m, src)
}
func (m *StreamNew) XXX_Size() int {
	return m.Size()
}
func (m *StreamNew) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamNew.DiscardUnknown(m)
}

var xxx_messageInfo_StreamNew proto.InternalMessageInfo

func (m *StreamNew) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type StreamData struct {
	Id uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *StreamData) Reset()      { *m = StreamData{} }
func (*StreamData) ProtoMessage() {}
func (*StreamData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{3}
}
func (m *StreamData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamData.Merge(m, src)
}
func (m *StreamData) XXX_Size() int {
	return m.Size()
}
func (m *StreamData) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamData.DiscardUnknown(m)
}

var xxx_messageInfo_StreamData proto.InternalMessageInfo

func (m *StreamData) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type StreamClose struct {
	Id uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *StreamClose) Reset()      { *m = StreamClose{} }
func (*StreamClose) ProtoMessage() {}
func (*StreamClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{4}
}
func (m *StreamClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamClose.Merge(m, src)
}
func (m *StreamClose) XXX_Size() int {
	return m.Size()
}
func (m *StreamClose) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamClose.DiscardUnknown(m)
}

var xxx_messageInfo_StreamClose proto.InternalMessageInfo

func (m *StreamClose) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type StreamRst struct {
	Id uint64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *StreamRst) Reset()      { *m = StreamRst{} }
func (*StreamRst) ProtoMessage() {}
func (*StreamRst) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{5}
}
func (m *StreamRst) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamRst) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamRst.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamRst) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRst.Merge(m, src)
}
func (m *StreamRst) XXX_Size() int {
	return m.Size()
}
func (m *StreamRst) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRst.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRst proto.InternalMessageInfo

func (m *StreamRst) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type StreamDown struct {
}

func (m *StreamDown) Reset()      { *m = StreamDown{} }
func (*StreamDown) ProtoMessage() {}
func (*StreamDown) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{6}
}
func (m *StreamDown) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamDown) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamDown.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamDown) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamDown.Merge(m, src)
}
func (m *StreamDown) XXX_Size() int {
	return m.Size()
}
func (m *StreamDown) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamDown.DiscardUnknown(m)
}

var xxx_messageInfo_StreamDown proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("protocol.PackType", PackType_name, PackType_value)
	proto.RegisterEnum("protocol.HelloRStatus", HelloRStatus_name, HelloRStatus_value)
	proto.RegisterType((*Hello)(nil), "protocol.Hello")
	proto.RegisterType((*HelloR)(nil), "protocol.HelloR")
	proto.RegisterType((*StreamNew)(nil), "protocol.StreamNew")
	proto.RegisterType((*StreamData)(nil), "protocol.StreamData")
	proto.RegisterType((*StreamClose)(nil), "protocol.StreamClose")
	proto.RegisterType((*StreamRst)(nil), "protocol.StreamRst")
	proto.RegisterType((*StreamDown)(nil), "protocol.StreamDown")
}

func init() { proto.RegisterFile("protocol.proto", fileDescriptor_2bc2336598a3f7e0) }

var fileDescriptor_2bc2336598a3f7e0 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xb1, 0x6e, 0xd3, 0x40,
	0x18, 0xc7, 0x7d, 0x4e, 0x13, 0x9a, 0x8f, 0xd4, 0xbd, 0x7c, 0x2d, 0xa9, 0x11, 0xed, 0x29, 0xca,
	0x42, 0xda, 0xa1, 0x0b, 0xbc, 0x40, 0x5b, 0x90, 0x88, 0x84, 0x02, 0xba, 0x94, 0x32, 0x22, 0x37,
	0x3e, 0x90, 0x95, 0x8b, 0xaf, 0xf2, 0x9d, 0xb1, 0xb2, 0xf5, 0x11, 0x78, 0x0c, 0x9e, 0x82, 0x99,
	0x31, 0x63, 0x47, 0xe2, 0x2c, 0x8c, 0x1d, 0x78, 0x00, 0x14, 0x3b, 0x8e, 0x62, 0x05, 0xc6, 0x6e,
	0xfe, 0xff, 0x7e, 0xa7, 0xef, 0xbe, 0xbf, 0x6d, 0x70, 0x6e, 0x22, 0x65, 0xd4, 0x50, 0xc9, 0xd3,
	0xec, 0x01, 0xb7, 0x8b, 0xdc, 0x89, 0xa1, 0xfa, 0x46, 0x48, 0xa9, 0xf0, 0x18, 0x68, 0x01, 0x3f,
	0x7d, 0x15, 0x91, 0x0e, 0x54, 0xe8, 0x92, 0x36, 0xe9, 0x6e, 0xf1, 0xdd, 0x82, 0x5f, 0xe5, 0x18,
	0x9f, 0xc3, 0xae, 0x0c, 0xae, 0x23, 0x2f, 0x9a, 0xac, 0x4e, 0xda, 0xd9, 0x49, 0x67, 0x89, 0x8b,
	0x83, 0x2e, 0x3c, 0xfa, 0x2c, 0x3c, 0x13, 0x47, 0xc2, 0xad, 0xb4, 0x2b, 0xdd, 0x06, 0x2f, 0x62,
	0xe7, 0x07, 0x81, 0x5a, 0x76, 0x2f, 0x7f, 0x90, 0x8b, 0x5b, 0x50, 0xd3, 0xc6, 0x33, 0xb1, 0x76,
	0x2b, 0x99, 0x5f, 0x26, 0xdc, 0x87, 0xaa, 0x2f, 0xa4, 0x37, 0x71, 0xb7, 0x32, 0x9c, 0x87, 0xc5,
	0x9a, 0x63, 0xa1, 0xb5, 0xf7, 0x45, 0xb8, 0xd5, 0x36, 0xe9, 0xd6, 0x79, 0x11, 0xd7, 0x0b, 0xd4,
	0xca, 0x05, 0x9e, 0x41, 0x7d, 0x60, 0x22, 0xe1, 0x8d, 0xfb, 0x22, 0x41, 0x07, 0xec, 0x9e, 0xbf,
	0x5c, 0xda, 0xee, 0xf9, 0x9d, 0x43, 0x80, 0x5c, 0xbe, 0xf2, 0x8c, 0xb7, 0x61, 0x8f, 0xe0, 0x71,
	0x6e, 0x2f, 0xa4, 0xd2, 0x62, 0x43, 0xaf, 0x26, 0x73, 0x6d, 0x36, 0x64, 0x63, 0x35, 0x59, 0x25,
	0xe1, 0xc9, 0x1f, 0x02, 0xdb, 0xef, 0xbd, 0xe1, 0xe8, 0x72, 0x72, 0x23, 0x70, 0x07, 0xea, 0x1f,
	0xfa, 0xbd, 0xab, 0xd7, 0x7c, 0x70, 0xf6, 0x96, 0x5a, 0xd8, 0x84, 0x9d, 0x42, 0x65, 0x2f, 0x9a,
	0x12, 0x44, 0x70, 0x4a, 0x88, 0x53, 0x1b, 0x9f, 0x40, 0xb3, 0x60, 0xab, 0x3e, 0x94, 0x62, 0x0b,
	0xb0, 0x8c, 0x17, 0x4d, 0x68, 0xf3, 0x1f, 0x5c, 0x25, 0x21, 0x45, 0x3c, 0x80, 0xbd, 0x32, 0xcf,
	0xba, 0xd1, 0xbd, 0xcd, 0xf9, 0x5c, 0x1b, 0xba, 0x8f, 0x87, 0xe0, 0x96, 0xf1, 0xc7, 0x20, 0xf4,
	0x55, 0xa2, 0x07, 0xc2, 0xd0, 0x16, 0x1e, 0xc1, 0xd3, 0xff, 0x59, 0x4e, 0x0f, 0x4e, 0x46, 0xd0,
	0xc8, 0xf7, 0x1f, 0xe4, 0x5f, 0x15, 0xc1, 0x59, 0xcf, 0xef, 0x46, 0xd4, 0x5a, 0x2c, 0xb4, 0xce,
	0x2e, 0x83, 0xb1, 0x50, 0xb1, 0xa1, 0x04, 0x4f, 0xe1, 0x78, 0x5d, 0x5c, 0xa8, 0x30, 0x14, 0x43,
	0x13, 0xa8, 0xb0, 0xaf, 0xcc, 0x99, 0x94, 0x2a, 0x11, 0xfe, 0xf9, 0x84, 0xc7, 0x52, 0x68, 0x61,
	0xe8, 0xad, 0x7d, 0xfe, 0x72, 0x3a, 0x63, 0xd6, 0xdd, 0x8c, 0x59, 0xf7, 0x33, 0x46, 0x6e, 0x53,
	0x46, 0xbe, 0xa7, 0x8c, 0xfc, 0x4c, 0x19, 0x99, 0xa6, 0x8c, 0xfc, 0x4a, 0x19, 0xf9, 0x9d, 0x32,
	0xeb, 0x3e, 0x65, 0xe4, 0xdb, 0x9c, 0x59, 0xd3, 0x39, 0xb3, 0xee, 0xe6, 0xcc, 0xba, 0xae, 0x65,
	0xbf, 0xee, 0x8b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xc9, 0x74, 0x92, 0x79, 0x03, 0x00,
	0x00,
}

func (x PackType) String() string {
	s, ok := PackType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x HelloRStatus) String() string {
	s, ok := HelloRStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Hello) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Hello)
	if !ok {
		that2, ok := that.(Hello)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProtocolVersion != that1.ProtocolVersion {
		return false
	}
	if this.LibraryVersion != that1.LibraryVersion {
		return false
	}
	if len(this.Feature) != len(that1.Feature) {
		return false
	}
	for i := range this.Feature {
		if !bytes.Equal(this.Feature[i], that1.Feature[i]) {
			return false
		}
	}
	return true
}
func (this *HelloR) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HelloR)
	if !ok {
		that2, ok := that.(HelloR)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProtocolVersion != that1.ProtocolVersion {
		return false
	}
	if this.LibraryVersion != that1.LibraryVersion {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Delay != that1.Delay {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.Feature) != len(that1.Feature) {
		return false
	}
	for i := range this.Feature {
		if !bytes.Equal(this.Feature[i], that1.Feature[i]) {
			return false
		}
	}
	return true
}
func (this *StreamNew) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamNew)
	if !ok {
		that2, ok := that.(StreamNew)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *StreamData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamData)
	if !ok {
		that2, ok := that.(StreamData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *StreamClose) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamClose)
	if !ok {
		that2, ok := that.(StreamClose)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *StreamRst) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamRst)
	if !ok {
		that2, ok := that.(StreamRst)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *StreamDown) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamDown)
	if !ok {
		that2, ok := that.(StreamDown)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Hello) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protocol.Hello{")
	s = append(s, "ProtocolVersion: "+fmt.Sprintf("%#v", this.ProtocolVersion)+",\n")
	s = append(s, "LibraryVersion: "+fmt.Sprintf("%#v", this.LibraryVersion)+",\n")
	s = append(s, "Feature: "+fmt.Sprintf("%#v", this.Feature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HelloR) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&protocol.HelloR{")
	s = append(s, "ProtocolVersion: "+fmt.Sprintf("%#v", this.ProtocolVersion)+",\n")
	s = append(s, "LibraryVersion: "+fmt.Sprintf("%#v", this.LibraryVersion)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Delay: "+fmt.Sprintf("%#v", this.Delay)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Feature: "+fmt.Sprintf("%#v", this.Feature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamNew) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protocol.StreamNew{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protocol.StreamData{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamClose) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protocol.StreamClose{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamRst) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protocol.StreamRst{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamDown) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&protocol.StreamDown{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProtocol(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Hello) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hello) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hello) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feature) > 0 {
		for iNdEx := len(m.Feature) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Feature[iNdEx])
			copy(dAtA[i:], m.Feature[iNdEx])
			i = encodeVarintProtocol(dAtA, i, uint64(len(m.Feature[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LibraryVersion != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.LibraryVersion))
		i--
		dAtA[i] = 0x10
	}
	if m.ProtocolVersion != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.ProtocolVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HelloR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloR) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloR) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feature) > 0 {
		for iNdEx := len(m.Feature) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Feature[iNdEx])
			copy(dAtA[i:], m.Feature[iNdEx])
			i = encodeVarintProtocol(dAtA, i, uint64(len(m.Feature[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Delay != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Delay))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.LibraryVersion != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.LibraryVersion))
		i--
		dAtA[i] = 0x10
	}
	if m.ProtocolVersion != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.ProtocolVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamNew) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamNew) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamNew) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamRst) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamRst) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamRst) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamDown) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamDown) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamDown) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtocol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Hello) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolVersion != 0 {
		n += 1 + sovProtocol(uint64(m.ProtocolVersion))
	}
	if m.LibraryVersion != 0 {
		n += 1 + sovProtocol(uint64(m.LibraryVersion))
	}
	if len(m.Feature) > 0 {
		for _, b := range m.Feature {
			l = len(b)
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	return n
}

func (m *HelloR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolVersion != 0 {
		n += 1 + sovProtocol(uint64(m.ProtocolVersion))
	}
	if m.LibraryVersion != 0 {
		n += 1 + sovProtocol(uint64(m.LibraryVersion))
	}
	if m.Status != 0 {
		n += 1 + sovProtocol(uint64(m.Status))
	}
	if m.Delay != 0 {
		n += 1 + sovProtocol(uint64(m.Delay))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if len(m.Feature) > 0 {
		for _, b := range m.Feature {
			l = len(b)
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	return n
}

func (m *StreamNew) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProtocol(uint64(m.Id))
	}
	return n
}

func (m *StreamData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProtocol(uint64(m.Id))
	}
	return n
}

func (m *StreamClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProtocol(uint64(m.Id))
	}
	return n
}

func (m *StreamRst) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProtocol(uint64(m.Id))
	}
	return n
}

func (m *StreamDown) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovProtocol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Hello) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Hello{`,
		`ProtocolVersion:` + fmt.Sprintf("%v", this.ProtocolVersion) + `,`,
		`LibraryVersion:` + fmt.Sprintf("%v", this.LibraryVersion) + `,`,
		`Feature:` + fmt.Sprintf("%v", this.Feature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HelloR) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HelloR{`,
		`ProtocolVersion:` + fmt.Sprintf("%v", this.ProtocolVersion) + `,`,
		`LibraryVersion:` + fmt.Sprintf("%v", this.LibraryVersion) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Delay:` + fmt.Sprintf("%v", this.Delay) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Feature:` + fmt.Sprintf("%v", this.Feature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamNew) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamNew{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamData{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamClose) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamClose{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamRst) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamRst{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamDown) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamDown{`,
		`}`,
	}, "")
	return s
}
func valueToStringProtocol(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Hello) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hello: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hello: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolVersion", wireType)
			}
			m.ProtocolVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LibraryVersion", wireType)
			}
			m.LibraryVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LibraryVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feature = append(m.Feature, make([]byte, postIndex-iNdEx))
			copy(m.Feature[len(m.Feature)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolVersion", wireType)
			}
			m.ProtocolVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LibraryVersion", wireType)
			}
			m.LibraryVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LibraryVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			m.Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feature = append(m.Feature, make([]byte, postIndex-iNdEx))
			copy(m.Feature[len(m.Feature)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamNew) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamNew: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamNew: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamRst) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamRst: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamRst: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamDown) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamDown: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamDown: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtocol(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthProtocol
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtocol = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol   = fmt.Errorf("proto: integer overflow")
)
